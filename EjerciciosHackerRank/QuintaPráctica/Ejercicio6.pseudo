procedure run() do
  
  delimitar(entrada, "[\\s\\n]");

  crear numFilas := leerEntero();
  crear numColumnas := leerEntero();
  crear mapaOculto := crearMatriz(int)[numFilas][numColumnas];
  
  //En el mapa oculto para niños las filas y las columnas se inician desde 1
  crear filaDeInicio := leerEntero();
  crear columnaDeInicio := leerEntero();

  //Nos comemos la línea entre la info inicial y la matriz de números
    leerLinea();

  //Leer la matriz oculta
  for i = 0; i < numColumnas; i++ do 
    for j = 0; j < numColumnas; j++ do 
      mapaOculto[i][j] = leerEntero();
    end for
  end for
  revelarMapa(mapaOculto, filaDeInicio. columnaDeInicio);
end procedure

procedure void revelarMapa(mapaOculto, filaInicial, columnaInicial) do
  crear mapaRevelado := crearMatriz(char)[mapaOculto.lenght][mapaOculto[0].lenght];

  //Agregar el mar al mapa revelado
  for i = 0; i < mapaOculto.lenght; i++ do
    for j = 0; j < mapaOculto[0].lenght; j++ do
      if mapaOculto[i][j] < 0 do
        mapaRevelado[i][j] = '~';
      end if
    end for
  end for

  //Revela el camino
  crear fila := filaInicial;
  crear columna := columnaInicial;
  crear casilla := mapaOculto[fila][columna];
  crear contador := 0;
  crear haTerminadoElCamino := false;
  while haTerminadoElCamino do
    if casilla < 0 do
      println("sea"); //el camino lleva al mar
      break;
    else if (casilla/10 < 1)||(casilla/10>mapaOculto.lenght)||(casilla%10 < 1)||(casilla%10 > mapaOculto[0].lenght) do
      println("error"); //el camino se sale del mapa
      break;
    else if hayLoop(casilla, contador, mapaOculto, filaInicial, columnaInicial) do
      mapaRevelado[fila][columna] = '.';
      println("loop"); //el camino tiene un ciclo
      break;
    else if casilla == mapaOculto[fila][columna] do
      println("treasure");
      mapaRevelado[fila][columna] = 'X';
      haTerminadoElCamino = true;
    else do
      mapaRevelado[fila][columna] = '.';
      contador++;
    end if
    fila = casilla/10;
    columna = casilla%10;
    casilla = mapaOculto[fila][columna];
  end while

  //revisar si hay explosivos
  for i = 0; i < mapaOculto.lenght; i++ do
    for j = 0; j < mapaOculto[0].lenght; j++ do
      if (mapaRevelado[i][j] == 'X') || (mapaRevelado[i][j] == '~') do
        //do nothing
      else if mapaOculto[i][j] == mapaOculto[mapaOculto[i][j]]/10][mapaOculto[i][j]]%10] do
        mapaRevelado[i][j] = '!';
      end if
    end for
  end for

  println();

  //imprimir mapa revelado
  for i = 0; i < mapaRevelado.lenght; i++ do
    for j = 0; j < mapaRevelado[0].lenght; j++ do
      if j != mapaRevelado[0].lenght-1 do
        print(mapaRevelado[i][j]+" ");
      else do
        println(" "+mapaRevelado[i][j]);
      end if
    end for
    println();
  end for
end procedure 

//Método que me dice si hay un loop o no.
procedure boolean hayLoop(valor, contador, mapaOculto, filaInicial, columnaInicial) do
  if contador == 0 do 
    return false;
  else
    crear hayLoop := false;
    crear casillaCamino = mapaOculto[filaInicial][columnaInicial];
    for i = 0; i <= contador; i++ do
      if casillaCamino == valor do
        hayLoop = true;
        break;
      else do
        casillaCamino = mapaOculto[casillaCamino/10][casillaCamino%10];  
      end if
    end for
    return hayLoop;
  end if
end procedure



//Revela el camino
int fila = filaInicial-1;
int columna = columnaInicial-1;
int casilla = mapaOculto[fila][columna];

int contador = 0;
boolean haTerminadoElCamino = false;

while(!haTerminadoElCamino) {
  int primerDigito = casilla/10;
  int segundoDigito = casilla%10;
  
  if(casilla < 0) {
    System.out.println("sea"); //El camino lleva al mar
  } else if((primerDigito < 1)||(primerDigito>mapaOculto.length)||(segundoDigito < 1)||(segundoDigito > mapaOculto[0].length)) {
      System.out.println("error"); //El camino se sale del mapa
  } else if(hayLoop(casilla, contador, mapaOculto, filaInicial, columnaInicial)) {
      mapaRevelado[fila][columna] = '.';
      System.out.println("loop"); //el camino tiene un ciclo
    break;
  } else if(casilla == mapaOculto[primerDigito][segundoDigito]) {
      System.out.println("treasure");
      mapaRevelado[fila][columna] = 'X';
      haTerminadoElCamino = true;
  } else {
      mapaRevelado[fila][columna] = '.';
      contador++;
  }
  fila = primerDigito;
  columna = segundoDigito;
  casilla = mapaOculto[fila][columna];
}

//Revisar si hay explosivos
for (int i = 0; i < mapaRevelado.length; i++) {
  for (int j = 0; j < mapaRevelado[0].length; j++) {
    if((mapaRevelado[i][j] == 'X') || (mapaRevelado[i][j] == '~')){
      //No haga nada
    } else if(mapaOculto[i][j] == mapaOculto[mapaOculto[i][j]/10][mapaOculto[i][j]%10]) {
        mapaRevelado[i][j] = '!';
    }
  }
}

int fila = filaInicial-1;
int columna = columnaInicial-1;
//recorre camino
//System.out.println(mapaOculto[fila][columna]);
int casillaCamino = mapaOculto[fila][columna];
for(int i = 1; i <= 9; i++) {
  System.out.print(casillaCamino+" ");
  fila = (casillaCamino/10)-1;
  columna = (casillaCamino%10)-1;
  casillaCamino = mapaOculto[fila][columna];
}

System.out.println(casillaCamino+" ");

int fila = filaInicial-1;
int columna = columnaInicial-1;
boolean cicloTerminado = false;
int casillaCamino = mapaOculto[fila][columna];
int producto = casillaCamino;
while(cicloTerminado) {

  int primerDigito = casillaCamino/10;
  int segundoDigito = casillaCamino%10;

  if(primerDigito<0) {
    //sea
    cicloTerminado = true;
  } else if(primerDigito>mapaOculto.lenght||segundoDigito>mapaOculto[0].lenght) {
    //error
    cicloTerminad0 = true;
  } else {
    int casillaSiguiente = mapaOculto[primerDigito][segundoDigito];
    
    if(casillaSiguiente == casillaCamino) {
      //treasure
      cicloTerminado = true;
    } else if(producto%casillaSiguiente==0) {
      //Hay loop
      cicloTerminado = true;
    } else {
      producto *= casillaSiguiente; 
      casillaCamino = casillaSiguiente;
    }
  }

  //imprime el camino oculto en números
  int casillaCamino = mapaOculto[fila][columna];
  int producto = casillaCamino;
  for(int i = 1; i <= 9; i++) {
    System.out.print(casillaCamino+" ");
    fila = (casillaCamino/10)-1;
    columna = (casillaCamino%10)-1;
    casillaCamino = mapaOculto[fila][columna];
  }
  
  System.out.println(casillaCamino+" ");

}